/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UseoptimisticRouteImport } from './routes/useoptimistic'
import { Route as UseactionstateRouteImport } from './routes/useactionstate'
import { Route as ProductsRouteImport } from './routes/products'
import { Route as IndexRouteImport } from './routes/index'

const UseoptimisticRoute = UseoptimisticRouteImport.update({
  id: '/useoptimistic',
  path: '/useoptimistic',
  getParentRoute: () => rootRouteImport,
} as any)
const UseactionstateRoute = UseactionstateRouteImport.update({
  id: '/useactionstate',
  path: '/useactionstate',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsRoute = ProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/products': typeof ProductsRoute
  '/useactionstate': typeof UseactionstateRoute
  '/useoptimistic': typeof UseoptimisticRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/products': typeof ProductsRoute
  '/useactionstate': typeof UseactionstateRoute
  '/useoptimistic': typeof UseoptimisticRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/products': typeof ProductsRoute
  '/useactionstate': typeof UseactionstateRoute
  '/useoptimistic': typeof UseoptimisticRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/products' | '/useactionstate' | '/useoptimistic'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/products' | '/useactionstate' | '/useoptimistic'
  id: '__root__' | '/' | '/products' | '/useactionstate' | '/useoptimistic'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProductsRoute: typeof ProductsRoute
  UseactionstateRoute: typeof UseactionstateRoute
  UseoptimisticRoute: typeof UseoptimisticRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/useoptimistic': {
      id: '/useoptimistic'
      path: '/useoptimistic'
      fullPath: '/useoptimistic'
      preLoaderRoute: typeof UseoptimisticRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/useactionstate': {
      id: '/useactionstate'
      path: '/useactionstate'
      fullPath: '/useactionstate'
      preLoaderRoute: typeof UseactionstateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProductsRoute: ProductsRoute,
  UseactionstateRoute: UseactionstateRoute,
  UseoptimisticRoute: UseoptimisticRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
